# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sample_utility as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.calculate_fibonacci(none_type_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.calculate_fibonacci(bool_0)


def test_case_2():
    bool_0 = False
    var_0 = module_0.calculate_triangle_area(bool_0, bool_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.calculate_triangle_area(none_type_0, none_type_0)


def test_case_4():
    int_0 = 2900
    var_0 = module_0.calculate_fibonacci(int_0)


def test_case_5():
    int_0 = -1022
    var_0 = module_0.calculate_fibonacci(int_0)
    none_type_0 = None
    var_1 = module_0.calculate_triangle_area(none_type_0, none_type_0)
    bool_0 = False
    var_2 = module_0.calculate_fibonacci(bool_0)
    set_0 = {bool_0, bool_0, bool_0}
    var_3 = module_0.calculate_triangle_area(bool_0, set_0)


def test_case_6():
    bool_0 = True
    var_0 = module_0.calculate_fibonacci(bool_0)


def test_case_7():
    bool_0 = True
    var_0 = module_0.calculate_triangle_area(bool_0, bool_0)
    assert var_0 == pytest.approx(0.5, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    var_0 = module_0.calculate_triangle_area(bool_0, bool_0)
    assert var_0 == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_1 = module_0.calculate_fibonacci(var_0)
    object_0 = module_1.object()
    int_0 = 14
    var_2 = module_0.calculate_fibonacci(int_0)
    var_3 = module_0.calculate_fibonacci(bool_0)
    var_4 = module_0.calculate_fibonacci(var_0)
    var_5 = module_0.calculate_fibonacci(var_3)
    object_1 = module_1.object()
    bool_1 = False
    var_6 = module_0.calculate_triangle_area(var_5, bool_1)
    var_7 = module_0.calculate_fibonacci(var_2)
    bool_2 = False
    var_8 = module_0.calculate_triangle_area(bool_0, bool_2)
    module_1.object(*var_0)


def test_case_9():
    bool_0 = True
    var_0 = module_0.calculate_triangle_area(bool_0, bool_0)
    assert var_0 == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_1 = module_0.calculate_fibonacci(var_0)
    object_0 = module_1.object()
    int_0 = 2
    var_2 = module_0.calculate_fibonacci(int_0)
    var_3 = module_0.calculate_fibonacci(bool_0)
    none_type_0 = None
    var_4 = module_0.calculate_triangle_area(var_2, int_0)
    var_5 = module_0.calculate_triangle_area(none_type_0, int_0)
    var_6 = module_0.calculate_fibonacci(bool_0)
    var_7 = module_0.calculate_triangle_area(var_1, var_5)
    var_8 = module_0.calculate_triangle_area(var_0, object_0)
    bool_1 = False
    var_9 = module_0.calculate_fibonacci(bool_1)
    var_10 = module_0.calculate_triangle_area(bool_1, var_3)
    var_11 = module_0.calculate_triangle_area(int_0, var_0)
    assert var_11 == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_12 = module_0.calculate_triangle_area(var_7, var_5)
    var_13 = module_0.calculate_fibonacci(var_5)
