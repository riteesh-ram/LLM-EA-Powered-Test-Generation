# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sample_utility as module_0


def test_case_0():
    bool_0 = False
    module_0.calculate_fibonacci(bool_0)


def test_case_1():
    float_0 = 0.1
    module_0.calculate_fibonacci(float_0)


def test_case_2():
    int_0 = 975
    none_type_0 = None
    module_0.calculate_fibonacci(none_type_0)
    var_0 = module_0.calculate_triangle_area(int_0, int_0)
    assert var_0 == pytest.approx(475312.5, abs=0.01, rel=0.01)


def test_case_3():
    str_0 = "+ q2u@fQ\r"
    complex_0 = -4659.72 - 3625.424133j
    module_0.calculate_triangle_area(str_0, complex_0)


def test_case_4():
    bool_0 = True
    var_0 = module_0.calculate_fibonacci(bool_0)
    module_0.calculate_fibonacci(var_0)


def test_case_5():
    int_0 = 91
    none_type_0 = None
    var_0 = module_0.calculate_fibonacci(none_type_0)
    module_0.calculate_triangle_area(int_0, var_0)
    module_0.calculate_fibonacci(int_0)


def test_case_6():
    int_0 = -6
    int_1 = 10
    var_0 = module_0.calculate_triangle_area(int_0, int_1)
    module_0.calculate_triangle_area(var_0, var_0)
    module_0.calculate_fibonacci(int_1)
    module_0.calculate_fibonacci(int_0)


def test_case_7():
    bool_0 = True
    int_0 = -6
    int_1 = 5
    var_0 = module_0.calculate_triangle_area(bool_0, bool_0)
    assert var_0 == pytest.approx(0.5, abs=0.01, rel=0.01)
    module_0.calculate_triangle_area(int_1, int_0)
    module_0.calculate_fibonacci(int_1)
    var_1 = module_0.calculate_fibonacci(int_0)
    module_0.calculate_fibonacci(var_1)


def test_case_8():
    bool_0 = True
    int_0 = -6
    bool_1 = True
    list_0 = [int_0, int_0, int_0, bool_1, bool_0, int_0]
    module_0.calculate_fibonacci(list_0)
    int_1 = 2
    var_0 = module_0.calculate_triangle_area(bool_0, bool_0)
    assert var_0 == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_1 = module_0.calculate_fibonacci(int_1)
    module_0.calculate_fibonacci(int_0)
    module_0.calculate_triangle_area(var_0, var_1)
    bytes_0 = b"\xee\x02\x1a\xbe\xe4f\x1e\x08\xb2\xfbQ\xf3#P\xf0\xa9\x97\x9e"
    module_0.calculate_triangle_area(var_1, bytes_0)
