# Auto-generated seed tests (normalised) - DO NOT EDIT MANUALLY
# Generated by evolutionary_algo_integration.normalizer
import sys
from pathlib import Path

# Add source directory to Python path
current_dir = Path(__file__).parent
source_dir = current_dir.parent / "source"
sys.path.insert(0, str(source_dir))

import sample_calculator_stats as _mod

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_0 -> calculator
def test_seed_0():
    arg_0 = 10
    arg_1 = 'add'
    arg_2 = 5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_1 -> calculator
def test_seed_1():
    arg_0 = 0
    arg_1 = 'add'
    arg_2 = 0
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_2 -> calculator
def test_seed_2():
    arg_0 = -5
    arg_1 = 'add'
    arg_2 = 3
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_3 -> calculator
def test_seed_3():
    arg_0 = 10.5
    arg_1 = 'add'
    arg_2 = 2.5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_4 -> calculator
def test_seed_4():
    arg_0 = 10
    arg_1 = 'sub'
    arg_2 = 5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_5 -> calculator
def test_seed_5():
    arg_0 = 5
    arg_1 = 'sub'
    arg_2 = 10
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_6 -> calculator
def test_seed_6():
    arg_0 = 0
    arg_1 = 'sub'
    arg_2 = 0
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_7 -> calculator
def test_seed_7():
    arg_0 = -5
    arg_1 = 'sub'
    arg_2 = -3
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_8 -> calculator
def test_seed_8():
    arg_0 = 10
    arg_1 = 'mul'
    arg_2 = 5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_9 -> calculator
def test_seed_9():
    arg_0 = 0
    arg_1 = 'mul'
    arg_2 = 5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_10 -> calculator
def test_seed_10():
    arg_0 = -2
    arg_1 = 'mul'
    arg_2 = 3
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_11 -> calculator
def test_seed_11():
    arg_0 = 2.5
    arg_1 = 'mul'
    arg_2 = 2
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_12 -> calculator
def test_seed_12():
    arg_0 = 10
    arg_1 = 'div'
    arg_2 = 5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_13 -> calculator
def test_seed_13():
    arg_0 = 10
    arg_1 = 'div'
    arg_2 = 2
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_14 -> calculator
def test_seed_14():
    arg_0 = -10
    arg_1 = 'div'
    arg_2 = 2
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_15 -> calculator
def test_seed_15():
    arg_0 = 7
    arg_1 = 'div'
    arg_2 = 2
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_16 -> calculator
def test_seed_16():
    arg_0 = 10
    arg_1 = 'mod'
    arg_2 = 3
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_17 -> calculator
def test_seed_17():
    arg_0 = 10
    arg_1 = 'mod'
    arg_2 = 2
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_18 -> calculator
def test_seed_18():
    arg_0 = -10
    arg_1 = 'mod'
    arg_2 = 3
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_19 -> calculator
def test_seed_19():
    arg_0 = 7.5
    arg_1 = 'mod'
    arg_2 = 2.5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_20 -> calculator
def test_seed_20():
    arg_0 = 2
    arg_1 = 'exp'
    arg_2 = 3
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_21 -> calculator
def test_seed_21():
    arg_0 = 5
    arg_1 = 'exp'
    arg_2 = 0
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_22 -> calculator
def test_seed_22():
    arg_0 = 4
    arg_1 = 'exp'
    arg_2 = 0.5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_23 -> calculator
def test_seed_23():
    arg_0 = 2
    arg_1 = 'exp'
    arg_2 = -1
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_24 -> calculator
def test_seed_24():
    arg_0 = 10
    arg_1 = 'floordiv'
    arg_2 = 3
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_25 -> calculator
def test_seed_25():
    arg_0 = 10
    arg_1 = 'floordiv'
    arg_2 = 2
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_26 -> calculator
def test_seed_26():
    arg_0 = -10
    arg_1 = 'floordiv'
    arg_2 = 3
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_arithmetic_operations_positive_param_27 -> calculator
def test_seed_27():
    arg_0 = 7.5
    arg_1 = 'floordiv'
    arg_2 = 2.5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_sqrt_operation_positive_param_0 -> calculator
def test_seed_28():
    arg_0 = 16
    arg_1 = 'sqrt'
    _mod.calculator(arg_0, arg_1)

# From: TestCalculator_test_calculator_sqrt_operation_positive_param_1 -> calculator
def test_seed_29():
    arg_0 = 0
    arg_1 = 'sqrt'
    _mod.calculator(arg_0, arg_1)

# From: TestCalculator_test_calculator_sqrt_operation_positive_param_2 -> calculator
def test_seed_30():
    arg_0 = 1
    arg_1 = 'sqrt'
    _mod.calculator(arg_0, arg_1)

# From: TestCalculator_test_calculator_sqrt_operation_positive_param_3 -> calculator
def test_seed_31():
    arg_0 = 100.0
    arg_1 = 'sqrt'
    _mod.calculator(arg_0, arg_1)

# From: TestCalculator_test_calculator_sqrt_negative_number_raises_value_error -> calculator
def test_seed_32():
    arg_0 = -4
    arg_1 = 'sqrt'
    _mod.calculator(arg_0, arg_1)

# From: TestCalculator_test_calculator_invalid_operation_returns_error_param_0 -> calculator
def test_seed_33():
    arg_0 = 10
    arg_1 = 'unknown_op'
    arg_2 = 5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_invalid_operation_returns_error_param_1 -> calculator
def test_seed_34():
    arg_0 = 10
    arg_1 = 'invalid'
    arg_2 = None
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_invalid_operation_returns_error_param_2 -> calculator
def test_seed_35():
    arg_0 = 10
    arg_1 = ''
    arg_2 = 5
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestCalculator_test_calculator_sqrt_with_b_parameter_ignored -> calculator
def test_seed_36():
    arg_0 = 9
    arg_1 = 'sqrt'
    arg_2 = 100
    _mod.calculator(arg_0, arg_1, arg_2)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_0 -> statistics_calculator
def test_seed_37():
    arg_0 = [1, 2, 3, 4, 5]
    arg_1 = 'mean'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_1 -> statistics_calculator
def test_seed_38():
    arg_0 = [10, 20, 30]
    arg_1 = 'mean'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_2 -> statistics_calculator
def test_seed_39():
    arg_0 = [1.0, 2.0, 3.0]
    arg_1 = 'mean'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_3 -> statistics_calculator
def test_seed_40():
    arg_0 = [-1, 0, 1]
    arg_1 = 'mean'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_4 -> statistics_calculator
def test_seed_41():
    arg_0 = [1, 2, 3, 4, 5]
    arg_1 = 'median'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_5 -> statistics_calculator
def test_seed_42():
    arg_0 = [1, 2, 3, 4]
    arg_1 = 'median'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_6 -> statistics_calculator
def test_seed_43():
    arg_0 = [10, 5, 20]
    arg_1 = 'median'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_7 -> statistics_calculator
def test_seed_44():
    arg_0 = [1.0, 2.0, 3.0, 4.0]
    arg_1 = 'median'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_8 -> statistics_calculator
def test_seed_45():
    arg_0 = [1, 2, 3, 4, 5]
    arg_1 = 'variance'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_9 -> statistics_calculator
def test_seed_46():
    arg_0 = [2, 2, 2, 2]
    arg_1 = 'variance'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_10 -> statistics_calculator
def test_seed_47():
    arg_0 = [1, 10]
    arg_1 = 'variance'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_positive_cases_param_11 -> statistics_calculator
def test_seed_48():
    arg_0 = [2, 2, 2, 2]
    arg_1 = 'std_dev'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_invalid_operation_returns_error_param_0 -> statistics_calculator
def test_seed_49():
    arg_0 = [1, 2, 3]
    arg_1 = 'unknown_stat_op'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_invalid_operation_returns_error_param_1 -> statistics_calculator
def test_seed_50():
    arg_0 = [1, 2, 3]
    arg_1 = 'invalid'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_invalid_operation_returns_error_param_2 -> statistics_calculator
def test_seed_51():
    arg_0 = [1, 2, 3]
    arg_1 = ''
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_large_numbers_and_precision -> statistics_calculator
def test_seed_52():
    arg_0 = [1000000, 1000001, 1000002]
    arg_1 = 'mean'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_large_numbers_and_precision -> statistics_calculator
def test_seed_53():
    arg_0 = [1, 2, 3, 1000000]
    arg_1 = 'median'
    _mod.statistics_calculator(arg_0, arg_1)

# From: TestStatisticsCalculator_test_statistics_calculator_large_numbers_and_precision -> statistics_calculator
def test_seed_54():
    arg_0 = [1000000.0, 1000001.0]
    arg_1 = 'variance'
    _mod.statistics_calculator(arg_0, arg_1)

# Generated 55 seed test cases from source tests
# - calculator: 37 test cases
# - statistics_calculator: 18 test cases
# Skipped 4 cases due to complex expressions or unsupported types
