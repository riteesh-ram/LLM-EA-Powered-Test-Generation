# Auto-generated seed tests (normalised) - DO NOT EDIT MANUALLY
# Generated by evolutionary_algo_integration.normalizer
import sys
from pathlib import Path

# Add source directory to Python path
current_dir = Path(__file__).parent
source_dir = current_dir.parent / "source"
sys.path.insert(0, str(source_dir))

import sample_number as _mod

# From: test_classify_numbers_empty_list -> classify_numbers
def test_seed_0():
    arg_0 = []
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_only_zeros -> classify_numbers
def test_seed_1():
    arg_0 = [0, 0]
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_only_negatives -> classify_numbers
def test_seed_2():
    arg_0 = [-1, -5, -10]
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_various_inputs_param_0 -> classify_numbers
def test_seed_3():
    arg_0 = [0, 1, -3, 4, 7, 2, 9]
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_various_inputs_param_1 -> classify_numbers
def test_seed_4():
    arg_0 = [1, 2, 3]
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_various_inputs_param_2 -> classify_numbers
def test_seed_5():
    arg_0 = [4, 5, 6]
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_various_inputs_param_3 -> classify_numbers
def test_seed_6():
    arg_0 = [7, 8, 100]
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_various_inputs_param_4 -> classify_numbers
def test_seed_7():
    arg_0 = [5]
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_none_input -> classify_numbers
def test_seed_8():
    arg_0 = None
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_list_with_non_numeric_elements -> classify_numbers
def test_seed_9():
    arg_0 = [1, 'a', 3]
    _mod.classify_numbers(arg_0)

# From: test_classify_numbers_list_with_floats -> classify_numbers
def test_seed_10():
    arg_0 = [1.5, 5.0, 7.1, -2.5, 0.0]
    _mod.classify_numbers(arg_0)

# Generated 11 seed test cases from source tests
# - classify_numbers: 11 test cases
